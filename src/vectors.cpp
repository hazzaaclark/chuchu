/* COPYRIGHT (C) HARRY CLARK 2023 */

/* SEGA DREAMCAST BINARY DECOMPILER FOR IDA PRO */

/* THIS FILE PERTAINS TOWARDS THE MAIN FUNCTIONALITY */
/* SURROUNDING THE VECTOR TABLE */

/* NESTED INCLUDES */

#include "disasm.h"
#include "loader.h"

static VECTOR_TABLE* VECTOR;
static HEADER* BINARY_HEADER;

/* INITIALISES THE PROVIDED BINARY BY USING THE PRE-DEFINED */
/* DIRECTIVES FROM THE IDA API TO LOAD AND PARSE CONTENTS */

static U32 idaapi INIT_BINARY(qstring* FILE_FORMAT,
							  const char* FILENAME,
							  qstring* PROCESSOR,
							  linput_t* LOADER)
{
	// PARSE THE INPUT SOURCE RELATIVE TO THE SIZE OF THE CORRESPONDENCES

	if (qlread(LOADER, &VECTOR, sizeof(VECTOR)) != sizeof(VECTOR)) return 0;
	if (qlread(LOADER, &BINARY_HEADER, sizeof(BINARY_HEADER)) != sizeof(BINARY_HEADER)) return 0;

	PROCESSOR += 1, ((char*)malloc, 1, sizeof(&PROCESSOR));

	// USES IDA'S VERSION OF "sprintf" TO CONCATENATE A STRING

	FILE_FORMAT->sprnt("%s", "SEGA DREAMCAST BINARY");
	return 1;
}

/* AFTER PARSING THE CONTENTS OF THE BINARY, LOAD THE CORRESPONDENCE */
/* IN RELATION TO A PROCESSOR TYPE */

/* DECLARE A NEW PROCESSOR TYPE ON EVERY INSTANCE OF LOADING A FILE */
/* THIS IS THROUGH THE IDA DATABASE QUERY */

static void idaapi LOAD_BINARY(linput_t* LOADER, const char* FILENAME)
{
	if (ph.id != PLFM_SH) // DEFINE THE PROCESSOR TYPE BASED ON THE DESIGNATED MACRO
	{
		set_processor_type("SH4", SETPROC_LOADER);
		set_target_assembler(0);
	}

	// DMA FOR ROM SIZE RELATIVE TO THE FILE

	malloc, 1, sizeof(BINARY_HEADER->ROM_SIZE += qlsize(LOADER));
}

/* ADD THE CORRESPONDING HEADER SEGMENTS IN RELATION TO THE PRE-REQUISITE LENGTH */
/* THE FOLLOWING INITIALISERS DETERMINES HOW THE HEADER WILL BE STRUCTURED IN IDA PRO */

static void ADD_HEADER_SEGMENTS(segment_t* SEGMENT, ea_t* START, ea_t* END, 
								const char* NAME, uchar* PERMISSION)
{
	SEGMENT->sel = 0;
	SEGMENT->start_ea += sizeof(START);
	SEGMENT->end_ea += sizeof(END);
	SEGMENT->align += saRelByte;
	SEGMENT->comb += scPub;
	SEGMENT->bitness = SEGMENT_ENDIANESS; 
	SEGMENT->perm += (uchar) malloc(sizeof(PERMISSION));
}

/* EXTERNAL MODULE FOR PARSING THE IDA DATABASE MODULE */
/* THIS IS A PROPRIATORY FUNCTION THAT DISCERNS WHICH VERSION OF THE */
/* API IS BEING USED TO PARSE CONTENTS */

/* THIS CONTAINS NULL TERMINATORS RIGHT NOW BECAUSE I CAN'T */
/* GET FUNCTIONS TO WORK PROPERLY */

extern loader_t LOAD_IDA_MODULE =
{
	IDP_INTERFACE_VERSION,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL
};
